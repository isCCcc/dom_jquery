{"mappings":"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","sources":["src/jquery.js"],"sourcesContent":["window.$ = window.jQuery = function (selector) {\r\n    let elements\r\n    if (typeof selector === 'string') {\r\n        elements = document.querySelectorAll(selector)\r\n    } else if (selector instanceof Array) {\r\n        elements = selector\r\n    }\r\n    // 返回一个可以操作 elements 的对象(暂时将该对象称作 api )\r\n    return {\r\n        oldApi: selector.oldApi,\r\n        // 闭包，访问外界变量 elements\r\n        addClass(className) {\r\n            for (let i = 0; i < elements.length; i++) {\r\n                elements[i].classList.add(className)\r\n            }\r\n            // 链式操作，返回对象本身\r\n            return this\r\n        },\r\n        // 2.查找 #xxx 里的 #yyy 元素\r\n        find(selector) {\r\n            let array = []\r\n            for (let i = 0; i < elements.length; i++) {\r\n                const el = Array.from(elements[i].querySelectorAll(selector))\r\n                array = array.concat(el)\r\n            }\r\n            array.oldApi = this // 将现阶段的 this 存储下来(旧api)\r\n            // 返回新的 api\r\n            return jQuery(array)\r\n        },\r\n        // 3.回退到上一个操作的 api\r\n        end() {\r\n            return this.oldApi\r\n        },\r\n        // 4.遍历元素\r\n        each(fn) {\r\n            for (let i = 0; i < elements.length; i++) {\r\n                fn.call(null, elements[i], i)\r\n            }\r\n            return this\r\n        },\r\n        // 5.获取父节点\r\n        parent() {\r\n            const array = []\r\n            this.each((node) => {\r\n                if (array.indexOf(node.parentNode) === -1) {\r\n                    array.push(node.parentNode)\r\n                }\r\n            })\r\n            return jQuery(array);\r\n        },\r\n        // 6.获取子节点\r\n        children() {\r\n            const array = []\r\n            this.each((node) => {\r\n                array.push(...node.children)\r\n            })\r\n            return jQuery(array);\r\n        },\r\n        // 7.获取兄弟节点\r\n        siblings() {\r\n            const array = []\r\n            this.each((node) => {\r\n                array.push(...Array.from(node.parentNode.children).filter(n => n != node))\r\n            })\r\n            return jQuery(array);\r\n        },\r\n        // 8.获取上一个节点\r\n        prev() {\r\n            const array = []\r\n            this.each((node) => {\r\n                let flag = node.previousSibling\r\n                while (flag && flag.nodeType === 3) {\r\n                    flag = flag.previousSibling\r\n                }\r\n                array.push(flag)\r\n            })\r\n            return jQuery(array)\r\n        },\r\n        // 9.获取下一个节点\r\n        next() {\r\n            const array = []\r\n            this.each((node) => {\r\n                let flag = node.nextSibling\r\n                while (flag && flag.nodeType === 3) {\r\n                    flag = flag.nextSibling\r\n                }\r\n                array.push(flag)\r\n            })\r\n            return jQuery(array)\r\n        }\r\n    }\r\n}"],"names":[],"version":3,"file":"index.3e2f9b55.js.map","sourceRoot":"/__parcel_source_root/"}