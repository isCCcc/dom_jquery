{"mappings":"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","sources":["src/jquery.js"],"sourcesContent":["window.$ = window.jQuery = function (selector) {\r\n    let elements\r\n    if (typeof selector === 'string') {\r\n        elements = document.querySelectorAll(selector)\r\n    } else if (selector instanceof Array) {\r\n        elements = selector\r\n    }\r\n\r\n    // 指定jQuery的prototype\r\n    const api = Object.create(jQuery.prototype)\r\n    Object.assign(api, {\r\n        elements: elements,\r\n        oldApi: selector.oldApi,\r\n    })\r\n    // 返回一个可以操作 elements 的对象的 api\r\n    return api\r\n}\r\n\r\njQuery.prototype = {\r\n    constructor: jQuery,\r\n    // 闭包，访问外界变量 elements\r\n    addClass(className) {\r\n        for (let i = 0; i < this.elements.length; i++) {\r\n            this.elements[i].classList.add(className)\r\n        }\r\n        // 链式操作，返回对象本身\r\n        return this\r\n    },\r\n    // 2.查找 #xxx 里的 #yyy 元素\r\n    find(selector) {\r\n        let array = []\r\n        for (let i = 0; i < this.elements.length; i++) {\r\n            const el = Array.from(this.elements[i].querySelectorAll(selector))\r\n            array = array.concat(el)\r\n        }\r\n        array.oldApi = this   // 将现阶段的 this 存储下来(旧api)\r\n        return jQuery(array)  // 返回新的 api\r\n    },\r\n    // 3.回退到上一个操作的 api\r\n    end() {\r\n        return this.oldApi\r\n    },\r\n    // 4.遍历元素\r\n    each(fn) {\r\n        for (let i = 0; i < this.elements.length; i++) {\r\n            fn.call(null, this.elements[i], i)\r\n        }\r\n        return this\r\n    },\r\n    // 5.获取父节点\r\n    parent() {\r\n        const array = []\r\n        this.each((node) => {\r\n            if (array.indexOf(node.parentNode) === -1) {\r\n                array.push(node.parentNode)\r\n            }\r\n        })\r\n        return jQuery(array);\r\n    },\r\n    // 6.获取子节点\r\n    children() {\r\n        const array = []\r\n        this.each((node) => {\r\n            array.push(...node.children)\r\n        })\r\n        return jQuery(array);\r\n    },\r\n    // 7.获取兄弟节点\r\n    siblings() {\r\n        const array = []\r\n        this.each((node) => {\r\n            array.push(...Array.from(node.parentNode.children).filter(n => n != node))\r\n        })\r\n        return jQuery(array);\r\n    },\r\n    // 8.获取上一个节点\r\n    prev() {\r\n        const array = []\r\n        this.each((node) => {\r\n            let flag = node.previousSibling\r\n            while (flag && flag.nodeType === 3) {\r\n                flag = flag.previousSibling\r\n            }\r\n            array.push(flag)\r\n        })\r\n        return jQuery(array)\r\n    },\r\n    // 9.获取下一个节点\r\n    next() {\r\n        const array = []\r\n        this.each((node) => {\r\n            let flag = node.nextSibling\r\n            while (flag && flag.nodeType === 3) {\r\n                flag = flag.nextSibling\r\n            }\r\n            array.push(flag)\r\n        })\r\n        return jQuery(array)\r\n    }\r\n}"],"names":[],"version":3,"file":"index.3e2f9b55.js.map","sourceRoot":"/__parcel_source_root/"}